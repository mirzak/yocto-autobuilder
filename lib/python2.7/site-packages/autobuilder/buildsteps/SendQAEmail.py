'''
Created on Aug 26, 2014

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2012-2014, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''


from buildbot.steps.shell import ShellCommand
from buildbot.process.properties import Properties
import os

class SendQAEmail(ShellCommand):
    haltOnFailure = False
    flunkOnFailure = True
    name = "SendQAEmail"
    description = ["Sending QA Email"]
    def __init__(self, factory, argdict=None, **kwargs):
        self.factory = factory
        description = ["Sending alert emails"]
        for k, v in argdict.iteritems():
            setattr(self, k, v)
        # Timeout needs to be passed to LoggingBuildStep as a kwarg
        self.timeout = 100000
        kwargs['timeout']=self.timeout
        ShellCommand.__init__(self, **kwargs)

    def start(self):
        if self.getProperty("custom_send_email") == 'True':
            web_root = os.environ.get('WEB_ROOT')
            web_url = os.environ.get('WEB_URL')
            mailto = ""
            mailcc = ""
            mailbcc = ""
            if os.environ.get('QA_MAIL_TO'):
                mailto = os.environ.get('QA_MAIL_TO')
            if os.environ.get('QA_MAIL_CC'):
                mailcc = os.environ.get('QA_MAIL_CC')
            if os.environ.get('QA_MAIL_BCC'):
                mailbcc = os.environ.get('QA_MAIL_BCC')
            mailsig = os.environ.get('QA_MAIL_SIG')
            properties = self.build.getProperties().asDict()
            repoprops = {}
            mailsubject = "Build available for QA"
            email_header = '''
    A build identified as needing QA has finished on the autobuilder. This
    build is located at:\n\n 
    %s''' % (self.getProperty('DEST').replace(web_root, web_url))
            
            if str(self.getProperty("custom_release_me")) == "True":
                is_milestone = self.getProperty("custom_is_milestone")
                milestone_number = self.getProperty("custom_milestone_number")
                rc_number = self.getProperty("custom_rc_number")

                if is_milestone == "False":
                    snapshot = "."+rc_number
                elif is_milestone == "True" and milestone_number is not "" and rc_number is not "":
                    snapshot = "_"+milestone_number+"."+rc_number
                else:
                    snapshot = ""
                prefix = snapshot
                poky_name = self.getProperty("custom_poky_name")+prefix
                poky_number = self.getProperty("custom_poky_number")+prefix
                yocto_number = self.getProperty("custom_yocto_number")+prefix
                rel_name = 'yocto-'+ yocto_number
                email_header = '''
A release candidate build for %s is now available at:\n\n 
%s\n\n
Please begin QA on this build as soon as possible.''' % (rel_name, self.getProperty('DEST').replace(web_root, web_url))
                mailsubject = "Release Candidate Build for " + rel_name + snapshot + " now available."


            for k, v in properties.iteritems():
                if "repourl_" in k:
                    name = k.replace("repourl_", '')
                    repourl = str(v[0])
                    githash = properties["commit_"+name][0]
                    repoprops[name]=repourl, githash
            email_body = '\n\nBuild hash information: \n'
            for k, v in repoprops.iteritems():
                email_body = email_body + '%s : %s \n' % (k, v[1])

            mailcmd = 'echo -e "' + email_header + '\n' + email_body + '\n' + mailsig + ' " | mail -s \'' + mailsubject + '\''

            if mailcc is not None and mailcc is not "":
                mailcmd += " -c '" + mailcc + "' "

            if mailbcc is not None and mailbcc is not "":
                mailcmd += " -b '" + mailbcc + "' "

            if mailto is not None and mailto is not "":
                mailcmd += " '" + mailto + "' "
            self.command = mailcmd
        else:
            self.command = 'echo "Not a QA build"'
        ShellCommand.start(self)
