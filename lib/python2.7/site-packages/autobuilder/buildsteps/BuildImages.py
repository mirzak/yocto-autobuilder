'''
Created on Jan 6, 2013

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2012-2013, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''


from buildbot.steps.shell import ShellCommand
from buildbot.process.buildstep import LogLineObserver
from distutils.version import StrictVersion
from buildbot.status.results import SUCCESS
import os

class BuildImages(ShellCommand):
    haltOnFailure = False
    flunkOnFailure = True
    name = "BuildImages"
    def __init__(self, factory, argdict=None, **kwargs):
        self.layerversion_yoctobsp=None
        self.machine=""
        self.images=""
        self._pendingLogObservers = []
        self.factory = factory
        for k, v in argdict.iteritems():
            setattr(self, k, v)
        # Timeout needs to be passed to LoggingBuildStep as a kwarg
        self.timeout = 100000
        kwargs['timeout']=self.timeout
        ShellCommand.__init__(self, **kwargs)

    def start(self):
        self.layerversion_yoctobsp = self.getProperty("layerversion_yoctobsp")
        self.layerversion_core = self.getProperty("layerversion_core")
        self.machine = self.getProperty("MACHINE")
        self.minnowExists = self.getProperty("minnowExists")
        try:
            self.deploycheck = self.getProperty('custom_deploy_artifacts')
        except:
            self.deploycheck = "True"
        if self.images == "#TOASTER":
            bitbakeflags = "-k -w 'bitbake_eventlog.json' "
            self.images=self.getProperty("custom_images")
            self.command = ". ./oe-init-build-env; bitbake " + bitbakeflags + self.images
            self.description = ["Building " + str(self.images)]
        elif self.images == "package-index" and str(self.deploycheck) == "False":
            self.command = "echo 'Skipping build as the required artifacts are not there.'"
            self.description = ["Skipping due to Non-Published"]

        # core-image-basic rename
        # See: http://git.yoctoproject.org/cgit/cgit.cgi/poky/commit/?id=b7f1cca517bbd4191828c6bae32e0c5041f1ff19
        # I hate making people change their configs, so support both.
        else:
            if self.layerversion_core < "4":
                self.images=self.images.replace("core-image-full-cmdline", "core-image-basic")
            else:
                self.images=self.images.replace("core-image-basic", "core-image-full-cmdline")

            if self.layerversion_core > "6":
                self.images=self.images.replace("LSB-QT-IMAGES", "core-image-lsb-qt3")
            else:
                self.images=self.images.replace("LSB-QT-IMAGES", "core-image-lsb-qt3")

            if "minnow" in self.machine:

                if self.minnowExists is "False":
                    self.command = "echo 'Minnowboard layer does not build for 1.8'"
                    self.description = ["Skipping Minnowboard"]

            if self.layerversion_core is not None \
               and int(self.layerversion_core) > 7 \
               and "adt-installer" in self.images:
                self.command = "echo 'We no longer build adt-installer'"
                self.description = ["Skipping adt-installer"]
            elif self.layerversion_yoctobsp is not None \
               and int(self.layerversion_yoctobsp) < 2 \
               and self.machine is not None \
               and self.machine == "genericx86-64":
                self.command = "echo 'Skipping Step.'"
                self.description = ["Skipping Step"]
            else:
                bitbakeflags = "-k "
                # -w only exists in bitbake 1.25 and newer, use distroversion string and make sure we're on poky >1.7
                if self.getProperty('bitbakeversion') and StrictVersion(self.getProperty('bitbakeversion')) >= StrictVersion("1.25"):
                    bitbakeflags += "-w 'bitbake_eventlog.json' "
                if self.minnowExists is None or self.minnowExists == "True":
                    self.command = ". ./oe-init-build-env; bitbake " + bitbakeflags + self.images
                    self.description = ["Building " + str(self.images)]
        ShellCommand.start(self)

    def describe(self, done=False):
        description = ShellCommand.describe(self, done)
        if self.layerversion_yoctobsp is not None and int(self.layerversion_yoctobsp) < 2 and self.machine is not None and self.machine == "genericx86-64":
            description.append("genericx86-64 does not exist in this branch. Skipping")
        return description
