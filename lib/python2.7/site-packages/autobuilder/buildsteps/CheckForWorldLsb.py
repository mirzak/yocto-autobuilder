'''
Created on May 1st, 2015

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2012-2015, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''

from buildbot.steps.shell import ShellCommand
from buildbot.process.buildstep import LogLineObserver
from buildbot.status.results import SUCCESS, SKIPPED

class CheckForWorldLsb(ShellCommand):
    haltOnFailure = False
    flunkOnFailure = True
    name = "CheckForWorldLsb"
    def __init__(self, factory, argdict=None, **kwargs):
        self.factory = factory
        for k, v in argdict.iteritems():
            setattr(self, k, v)
        # Timeout needs to be passed to LoggingBuildStep as a kwarg
        self.timeout = 100000
        kwargs['timeout']=self.timeout
        ShellCommand.__init__(self, **kwargs)

    def start(self):
        # world-lsb works, right about here
        self.command = "git log --pretty=format:'%H' |grep db409697db2ea0931cdcd2015d089b6b0ea39bbb"
        self.description = ["Checking for working world-lsb"]
        ShellCommand.start(self)

    def commandComplete(self, cmd):
        result = cmd.logs['stdio'].getText()
        worldLSBExists = ""
        try:
            worldLSBExists = result.split()[-1]
        except:
            self.setProperty('worldLSBExists', "False", "World LSB Does Not Build.")
            self.finished(SUCCESS)
            self.build.allStepsDone()

        if worldLSBExists == "db409697db2ea0931cdcd2015d089b6b0ea39bbb":
            self.setProperty('worldLSBExists', "True", "World LSB Builds.")
            self.finished(SUCCESS)

    def getText(self, cmd, results):
        return ShellCommand.getText(self, cmd, results)
