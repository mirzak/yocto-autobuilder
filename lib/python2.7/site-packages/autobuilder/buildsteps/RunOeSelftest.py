'''
__author__ = "Stefan Stanacar"
__copyright__ = "Copyright 2014 Intel Corporation"
__credits__ = ["Stefan Stanacar"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Stefan Stanacar"
__email__ = "stefanx.stanacar@intel.com"
'''

import platform

from buildbot.steps.shell import ShellCommand

from lib.ABTools import save_error_report, get_lsb_distro

class RunOeSelftest(ShellCommand):
    haltOnFailure = False
    flunkOnFailure = True
    name = "Running oe-selftest"
    def __init__(self, factory, argdict=None, **kwargs):
        self.tests = None
        self.factory = factory
        for k, v in argdict.iteritems():
                setattr(self, k, v)
        self.description = "Running oe-selftest"
        self.timeout = 100000
        kwargs['timeout']=self.timeout
        ShellCommand.__init__(self, **kwargs)

    def start(self):
        self.command = ""
        self.command += ". ./oe-init-build-env; "
        self.command += "checkvnc; "
        if self.tests == None:
            self.command += "if [ -d ../meta-selftest ]; then export DISPLAY=:1; oe-selftest --run-all-tests; else echo 'Skipping step - no meta-selftest layer here'; fi"
        else:
            self.command += "if [ -d ../meta-selftest ]; then export DISPLAY=:1; oe-selftest " + self.tests + "; else echo 'Skipping step - no meta-selftest layer here'; fi"
        ShellCommand.start(self)

    def _createOESelftestErrorReport(self, log):
        """
            Create a oe-selftest error report since oe-selftest
            is intended to test the build system no information
            about machine, distro and target_sys are provided so
            use universal value.
        """

        report = {}

        report['machine'] = 'universal'
        report['build_sys'] = "%s-%s" % (platform.machine(),
                platform.system().lower())
        # XXX: Set to universal because isn't easy to get Autobuilder
        # worker distro.
        report['nativelsb'] = 'universal' 
        report['distro'] = 'universal'
        report['target_sys'] = 'universal'

        report['component'] = 'oe-selftest'
        report['branch_commit'] = self.getProperty('branch') + ': ' + \
                self.getProperty('got_revision')

        report['error_type'] = 'oe-selftest'

        failure = {}
        failure['package'] = 'oe-selftest'
        failure['task'] = self.command[self.command.find('oe-selftest'):]
        failure['log'] = log

        report['failures'] = [failure]

        return report

    def commandComplete(self, cmd):
        if cmd.didFail():
            buildername = self.getProperty('buildername')
            buildnumber = self.getProperty('buildnumber')

            log = cmd.logs['stdio'].getText()

            report = self._createOESelftestErrorReport(log)
            save_error_report(buildername, buildnumber, report, 'oe_selftest')

