'''
Created on March 14th, 2016

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2012-2015, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''

from buildbot.steps.shell import ShellCommand
from buildbot.process.buildstep import LogLineObserver
from buildbot.status.results import SUCCESS, FAILURE
import os

class TestForDDPatch(ShellCommand):
    haltOnFailure = False
    flunkOnFailure = True
    name = "Check for distrodata patch"
    def __init__(self, factory, argdict=None, **kwargs):
        self.factory = factory
        for k, v in argdict.iteritems():
            setattr(self, k, v)
        # Timeout needs to be passed to LoggingBuildStep as a kwarg
        self.timeout = 100000
        kwargs['timeout']=self.timeout
        ShellCommand.__init__(self, **kwargs)

    def start(self):
        DEST=self.getProperty("DEST")
        ddpath = os.path.join(DEST, 'distro_data')
        self.command = "OLDIFS=$IFS; IFS=$'\n'; for x in `find " + ddpath + \
                        " -name distrodata.csv`; \
                            do cat $x >> distrodata.tmp; \
                        done;"
        self.command += "for x in `cat distrodata.tmp|grep -v 'Package,Description'`; \
                            do name=`echo $x|cut -d',' -f1`; \
                            distros=`echo $x|cut -d',' -f 10-15`; \
                            echo $name,$distros>>test.csv; \
                        done; "
        self.command += "cat test.csv|awk 'BEGIN {FS=\",\"} $2==\"\" {print}' >> " + ddpath + "/distropatch.csv; "
        self.command += "if [ ! -s \"" + ddpath + "/distropatch.csv\" ] ; \
                         then echo 'PASSED!'; \
                         else  echo 'FAILED!'; fi; IFS=$OLDIFS"
        self.description = ["Checking to ensure no missing Distrodata"]
        ShellCommand.start(self)

    def commandComplete(self, cmd):
        result = cmd.logs['stdio'].getText()
        if "FAILED!" in result:
            self.description = ["distro_alias needs to be patched."]
            self.finished(FAILURE)
        elif "PASSED!" in result:
            self.description = ["distro_alias is up to date."]
            self.finished(SUCCESS)
        else:
            self.finished(FAILURE)

