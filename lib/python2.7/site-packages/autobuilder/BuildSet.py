'''
Created on Dec 17, 2012

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2013, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "pidge@toganlabs.com"
'''

#!/usr/bin/python

from config import *
from twisted.python import log
from buildsteps import *
import ast
from buildbot.process import factory as factory
from buildbot.steps.shell import ShellCommand
from buildbot.process.properties import Property, Properties, PropertiesMixin, renderer
from buildbot.steps.trigger import Trigger
import os
from lib.ABTools import stringToBool
class BuildSet():
    '''
    classdocs
    '''
    def __init__(self, name, layers, steps, builders, set_props={}):
        '''
        Constructor
        '''
        locals()['f'+name] = factory.BuildFactory()
        for stepOrder in steps:
            for step in dict(stepOrder):
                factoryFN=getattr(locals()['f'+name], 'addStep')
                if step=="PublishLayerTarballs":
                    for layer in layers:
                        kwargs=stepOrder[step]
                        layername=layer.iterkeys().next()
                        if layer[layer.iterkeys().next()].has_key('checkout') and layer[layer.iterkeys().next()]['checkout'] == False:
                            pass
                        else:
                            if layername == "poky" or layername == 'oecore':
                                workdir = 'build'
                            elif "eclipse" in layername:
                                workdir="build"
                            else:
                                workdir="build/" + layername
                            m = __import__ (step)
                            func = getattr(m, step)
                            factoryFN(func(locals()['f'+name],
                                      layername=layername,
                                      workdir=workdir,
                                      argdict=layer[layer.iterkeys().next()]))
                elif step=="CheckOutLayers":
                # All steps need the factory passed as the first param
                    for layer in layers:
                        kwargs=stepOrder[step]
                        layername=layer.iterkeys().next()
                        if os.environ.get("RESOLVE_TRIGGERED_HEAD") == "True":
                            m = __import__ ("ResolveLayerHead")
                            func = getattr(m, "ResolveLayerHead")
                            factoryFN(func(locals()['f'+name],
                                      layername=layername,
                                      scheduler=name,
                                      argdict=layer[layer.iterkeys().next()]))
                        if 'checkout' in layer[layer.iterkeys().next()]:
                            if layer[layer.iterkeys().next()]['checkout'] == False:
                                pass
                        else:
                            storedir=None
                            mirrordir=None
                            method = 'clobber'
                            mode='full'
                            if str(os.environ.get('OPTIMIZED_GIT_CLONE')) == "True":
                                if 'poky' in layername or 'oecore' in layername or 'eclipse' in layername:
                                    method='movecopy'
                                    storedir=os.environ.get('OGIT_TRASH_DIR')
                                    mirrordir=os.environ.get('OGIT_MIRROR_DIR')
                                else:
                                    method='barecopy'
                                    storedir=os.environ.get('OGIT_TRASH_DIR')
                                    mirrordir=os.environ.get('OGIT_MIRROR_DIR')
                            if 'poky' in layername or 'oecore' in layername:
                                workdir = 'build'
                            elif "eclipse-poky" in layername:
                                workdir="build/" + layername
                            else:
                                workdir="build/" + layername
                            m = __import__ (step)
                            func = getattr(m, step)
                            factoryFN(func(locals()['f'+name],
                                      layername=layername,
                                      mode=mode,
                                      scheduler=name,
                                      method=method,
                                      storedir=storedir,
                                      mirrordir=mirrordir,
                                      workdir=workdir,
                                      argdict=layer[layer.iterkeys().next()]))
                            if 'layerversion' in layer[layer.iterkeys().next()]:
                                m = __import__ ("GetLayerVersion")
                                func = getattr(m, "GetLayerVersion")
                                for layerversion_name, layerversion_path in layer[layer.iterkeys().next()]['layerversion'].iteritems():
                                    factoryFN(func(locals()['f'+name],
                                              layerversion=layerversion_name,
                                              workdir=layerversion_path,
                                              argdict={}))

                elif step=="CreateBBLayersConf":
                    kwargs=stepOrder[step]
                    m = __import__ (step)
                    func = getattr(m, step)
                    factoryFN(func(locals()['f'+name],
                              layers,
                              argdict=stepOrder[step]))
                elif step=="TriggerBuilds":
                    set_properties = {}
                    copy_properties = []
                    set_properties['DEST']= Property("DEST")
                    trigger_name = ""
                    waitForFinish = False
                    if 'schedulerName' in stepOrder[step]:
                        trigger_name = 'trigger_' + stepOrder[step]['schedulerName']
                    if 'set_properties' in stepOrder[step]:
                        for p in stepOrder[step]['set_properties'].iterkeys():
                            set_properties[p]=stepOrder[step]['set_properties'][p]
                    if 'copy_properties' in stepOrder[step]:
                        for p in stepOrder[step]['copy_properties']:
                            copy_properties.append('%s' % p)
                    if 'waitForFinish' in stepOrder[step]:
                        waitForFinish = stringToBool(stepOrder[step]['waitForFinish'])
                    else:
                        waitForFinish = False
                    if 'schedulerNames_nowait' in stepOrder[step]:
                        for scheduler in stepOrder[step]['schedulerNames_nowait'].keys():
                            for layer in layers:
                                layername=layer.iterkeys().next()
                                if Property('commit_resolvedhead_' + layername):
                                    set_properties['commit_resolvedhead_' + layername] = Property('commit_resolvedhead_' + layername)
                                    set_properties['commit_' + layername] = Property('commit_resolvedhead_' + layername)
                                elif Property('commit_' + layername):
                                    set_properties['commit_' + layername] = Property('commit_' + layername)
                                if Property('branch_' + layername):
                                    set_properties['branch_' + layername] = Property('branch_' + layername)
                                if Property('repo_' + layername):
                                    set_properties['repo_' + layername] = Property('repo_' + layername)
                                elif Property('repourl_' + layername):
                                    set_properties['repo_' + layername] = Property('repourl_' + layername)
                    if 'schedulerNames' in stepOrder[step]:
                        for scheduler in stepOrder[step]['schedulerNames'].keys():
                            for layer in layers:
                                layername=layer.iterkeys().next()
                                if Property('commit_resolvedhead_' + layername):
                                    set_properties['commit_resolvedhead_' + layername] = Property('commit_resolvedhead_' + layername)
                                    set_properties['commit_' + layername] = Property('commit_resolvedhead_' + layername)
                                elif Property('commit_' + layername):
                                    set_properties['commit_' + layername] = Property('commit_' + layername)
                                if Property('branch_' + layername):
                                    set_properties['branch_' + layername] = Property('branch_' + layername)
                                if Property('repo_' + layername):
                                    set_properties['repo_' + layername] = Property('repo_' + layername)
                                elif Property('repourl_' + layername):
                                    set_properties['repo_' + layername] = Property('repourl_' + layername)
                    factoryFN(Trigger(schedulerNames=[trigger_name, trigger_name + "_nowait"],
                                      noWait=[trigger_name + "_nowait"],
                                      set_properties=set_properties,
                                      copy_properties=copy_properties,
                                      waitForFinish=waitForFinish))
                else:
                    kwargs=stepOrder[step]
                    m = __import__ (step)
                    func = getattr(m, step)
                    factoryFN(func(locals()['f'+name],
                              argdict=stepOrder[step]))
        locals()['b%s' % name] = {'name': name,
                            'slavenames': builders,
                            'builddir': name,
                            'factory': locals()['f'+name],
                            }
        yocto_builders=YOCTO_BUILDERS
        yocto_builders.append(locals()['b%s' % name])

