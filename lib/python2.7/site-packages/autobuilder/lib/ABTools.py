'''
Created on Jan 19, 2014

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2014, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''

import os
import time
import json
import codecs

from autobuilder.config import YOCTO_ABBASE

def capitalize(word):
    return ' '.join([s[0].upper() + s[1:] for s in word.split(' ')])

def stringToBool(v):
    return v.lower() in ("true", "t", "1")

def get_error_report_controller_dir(buildername, buildnumber):
    errordir_base = os.path.join(YOCTO_ABBASE, 'yocto-controller', buildername,
            'error-report')
    errordir = os.path.join(errordir_base, str(buildnumber))
    return errordir

def get_error_report_worker_dir(buildername):
    if os.environ.get('ERROR_REPORT_DIR') is None:
        workerdir = os.path.join(YOCTO_ABBASE, 'yocto-worker')
        errordir = os.path.join(workerdir, buildername,
                'build/build/tmp/log/error-report/')
    else:
        errordir = os.environ.get('ERROR_REPORT_DIR')

    return errordir

def save_error_report(buildername, buildnumber, report, report_type):
    errordir = get_error_report_controller_dir(buildername, buildnumber)
    if not os.path.exists(errordir):
        os.makedirs(errordir)

    filename = os.path.join(errordir, "error_report_%s_%d.txt" % \
            (report_type, int(time.time())))
    with codecs.open(filename, 'w', 'utf-8') as f:
        json.dump(report, f, indent=4, sort_keys=True)
